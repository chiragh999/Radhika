# Generated by Django 5.1.4 on 2025-02-06 11:30

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='EventBooking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('selected_items', models.JSONField(default=dict)),
                ('name', models.CharField(max_length=100)),
                ('mobile_no', models.CharField(max_length=17, validators=[django.core.validators.RegexValidator(message="Mobile number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('reference', models.CharField(max_length=50)),
                ('event_date', models.DateField()),
                ('event_time', models.CharField(max_length=100)),
                ('event_address', models.TextField()),
                ('advance_amount', models.CharField(blank=True, max_length=150, null=True)),
                ('advance_payment_mode', models.CharField(blank=True, choices=[('CASH', 'CASH'), ('CHEQUE', 'CHEQUE'), ('BANK_TRANSFER', 'BANK TRANSFER'), ('ONLINE', 'ONLINE'), ('OTHER', 'OTHER')], max_length=20, null=True)),
                ('per_dish_amount', models.CharField(max_length=150)),
                ('estimated_persons', models.CharField(max_length=150)),
                ('description', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirm', 'Confirm'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('done', 'Done')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-event_date', '-event_time'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('bill_no', models.AutoField(primary_key=True, serialize=False)),
                ('billed_to_ids', models.JSONField(default=list, help_text='List of EventBooking IDs this Payment is billed to')),
                ('total_amount', models.DecimalField(decimal_places=0, max_digits=100)),
                ('advance_amount', models.DecimalField(decimal_places=0, max_digits=100)),
                ('pending_amount', models.DecimalField(blank=True, decimal_places=0, max_digits=100, null=True)),
                ('payment_date', models.DateField()),
                ('transaction_amount', models.DecimalField(decimal_places=0, max_digits=100)),
                ('payment_mode', models.CharField(choices=[('CASH', 'CASH'), ('CHEQUE', 'CHEQUE'), ('BANK_TRANSFER', 'BANK TRANSFER'), ('ONLINE', 'ONLINE'), ('OTHER', 'OTHER')], default='OTHER', max_length=200)),
                ('settlement_amount', models.DecimalField(blank=True, decimal_places=0, max_digits=100, null=True)),
                ('payment_status', models.CharField(choices=[('PARTIAL', 'Partial'), ('UNPAID', 'Unpaid'), ('PAID', 'Paid')], default='UNPAID', max_length=100)),
                ('note', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='StokeCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserModel',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='app.category')),
            ],
        ),
        migrations.CreateModel(
            name='StokeItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('nte_price', models.CharField(max_length=250)),
                ('total_price', models.CharField(max_length=250)),
                ('quantity', models.DecimalField(decimal_places=0, max_digits=100)),
                ('alert', models.CharField(max_length=500)),
                ('type', models.CharField(choices=[('KG', 'કિલોગ્રામ'), ('G', 'ગ્રામ'), ('L', 'લીટર'), ('ML', 'મિલીલીટર'), ('QTY', 'જથ્થો')], max_length=10)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stokeitem', to='app.stokecategory')),
            ],
        ),
    ]
